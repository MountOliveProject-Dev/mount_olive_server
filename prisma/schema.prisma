
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}
enum NotificationType {
  MEDIA
  EVENT
}
enum MediaType {
  VIDEO
  AUDIO
}

model User {
  id       Int     @id @default(autoincrement())
  email    String   @unique
  firstName     String
  lastName      String
  profileId      Int @unique  
  profile        profile? @relation(fields: [profileId], references: [id]) 
    
  // Relation
  media           UserMediaEngagement[] 
}
model profile {
  id       Int     @id @default(autoincrement())
  dateOfBirth DateTime
  gender String
  phone String
  avatar String
  createdAt     String
  updatedAt     String 
  // Relation
  user User?
}


model Event {
  id       Int     @id @default(autoincrement())
  uniqueId String @unique @default(cuid())
  title    String
  createdAt     String
  updatedAt     String 
  date String
  time String
  location String
  venue String
  host String
  description String
  thumbnail String

  //
  eventNotifications notificationEngagements[]
}

model Notification {
  id       Int     @id @default(autoincrement())
  title    String
  description String
  createdAt   String
  updatedAt   String
  read Boolean

  //
  notificationEngagements notificationEngagements?
}

model Media {
  id       Int     @id @default(autoincrement())
  uniqueId String @unique @default(cuid())
  title    String
  description String
  coverPhoto String
  source String
  host String
  duration BigInt
  type MediaType
  category String
  createdAt  String
  updatedAt     String

  // Relation
  MediaEngagement       UserMediaEngagement[]
  mediaNotifications notificationEngagements[]  
}

model UserMediaEngagement {
  userId          Int
  mediaId         Int
  viewCount BigInt
  likeCount BigInt
  user            User            @relation(fields: [userId], references: [id])
  media           Media           @relation(fields: [mediaId], references: [id])

  @@id([userId, mediaId])         // Composite primary key
}
model notificationEngagements{
  id       Int     @id @default(autoincrement())
  type          NotificationType
  eventId       Int?
  mediaId       Int?
  specialKey    String @unique
  notificationId Int @unique
  notification  Notification  @relation(fields: [notificationId], references: [id])
  event         Event?        @relation(fields: [eventId], references: [id])
  media         Media?        @relation(fields: [mediaId], references: [id])
}
model MediaStorageToken {
  id          Int      @id @default(autoincrement())
  accessToken String
  refreshToken String
  scope       String
  tokenType   String
  expiryDate  Int
}


