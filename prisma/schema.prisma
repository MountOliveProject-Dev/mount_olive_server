
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

enum NotificationType {
  Video
  Audio
  Event
  
}
enum MediaType {
  Video
  Audio
  Image
}

model Media {
  id       Int     @id @default(autoincrement())
  uniqueId String @unique @default(cuid())
  title    String
  description String?
  url String
  duration String?
  type MediaType
  postedAt  String
  updatedAt     String

  folderId Int

  // Relation
  mediaNotifications engagementsManager? 
  storageFolder folder @relation(fields: [folderId], references: [id])

}
model Event {
  id       Int     @id @default(autoincrement())
  uniqueId String @unique @default(cuid())
  title    String
  createdAt     String
  updatedAt     String 
  date String
  time String
  location String
  venue String
  host String
  description String
  thumbnail String

  //
  eventNotifications engagementsManager?
}

model Notification {
  id       Int     @id @default(autoincrement())
  title    String
  description String?
  createdAt   String
  updatedAt   String
  read Boolean

  //
  notificationEngagements engagementsManager?
}

model engagementsManager {
  id       Int     @id @default(autoincrement())
  type          NotificationType
  eventId       String? @unique
  eventStatus Boolean
  videoStatus Boolean
  audioStatus Boolean
  mediaId       String? @unique
  specialKey    String @unique
  notificationId Int @unique
  notification  Notification  @relation(fields: [notificationId], references: [id])
  event         Event?        @relation(fields: [eventId], references: [uniqueId])
  media         Media?        @relation(fields: [mediaId], references: [uniqueId])
}
enum FolderType {
  Images
  Audios
}

model folder {
  id Int @id @default(autoincrement())
  folderId String @unique
  folderType FolderType 
  name String

  // Relation
  media Media[]
}






